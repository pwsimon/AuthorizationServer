//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
#include <wmistr.h>
#include <evntrace.h>
#include "evntprov.h"
//
//  Initial Defs
//
#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// Allow disabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif 


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level; 
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;

}
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{

    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);

}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Windows Vista and later.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider. 

    ControlCode - The parameter indicates whether the provider 
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to 
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category 
                      of events that the provider writes. 

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider 
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;
 
        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif
   
    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION
//+
// Provider PRIVATE-PWSIMON-DEV-AuthorizationServer Event Count 11
//+
EXTERN_C __declspec(selectany) const GUID PRIVATE_PWSIMON_DEV_AUTHORIZATIONSERVER = {0xfb032477, 0xd79f, 0x47bb, {0x9f, 0xc0, 0xa8, 0x0f, 0x61, 0x2e, 0x5e, 0x55}};

//
// Channel
//
#define PRIVATE_PWSIMON_DEV_AUTHORIZATIONSERVER_CHANNEL_C1 0x9
#define DEBUG_CHANNEL 0x10

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR COMFinalConstruct = {0x65, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define COMFinalConstruct_value 0x65
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR COMFinalRelease = {0x66, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define COMFinalRelease_value 0x66
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR COMError = {0x67, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define COMError_value 0x67
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR genericXHR_GET = {0x68, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define genericXHR_GET_value 0x68
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR genericXHR_POST = {0x69, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define genericXHR_POST_value 0x69
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CTokenFile_LockForRenew_DoLock = {0x78, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define CTokenFile_LockForRenew_DoLock_value 0x78
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CTokenFile_LockForRenew_AlreadyLocked = {0x79, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define CTokenFile_LockForRenew_AlreadyLocked_value 0x79
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CTokenFile_UnLockFromRenew_Succeeded = {0x82, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define CTokenFile_UnLockFromRenew_Succeeded_value 0x82
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR CTokenFile_UnLockFromRenew_Failed = {0x83, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define CTokenFile_UnLockFromRenew_Failed_value 0x83
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR AutomationInstanceTerminatedDirty = {0x384, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define AutomationInstanceTerminatedDirty_value 0x384
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR UIInstanceTerminatedDirty = {0x385, 0x0, 0x10, 0x4, 0x0, 0x0, 0x4000000000000000};
#define UIInstanceTerminatedDirty_value 0x385

//
// Note on Generate Code from Manifest for Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow disabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG PRIVATE_PWSIMON_DEV_AuthorizationServerKeywords[1] = {0x4000000000000000};
EXTERN_C __declspec(selectany) const UCHAR PRIVATE_PWSIMON_DEV_AuthorizationServerLevels[1] = {4};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT PRIVATE_PWSIMON_DEV_AUTHORIZATIONSERVER_Context = {0, 0, 0, 0, 0, 0, 0, 0, 1, PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits, PRIVATE_PWSIMON_DEV_AuthorizationServerKeywords, PRIVATE_PWSIMON_DEV_AuthorizationServerLevels};

EXTERN_C __declspec(selectany) REGHANDLE PRIVATE_PWSIMON_DEV_AuthorizationServerHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
#pragma warning(push)
#pragma warning(disable:6103)
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function registers the provider with ETW USER mode.

Arguments:
    ProviderId - Provider ID to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}
#pragma warning(pop)


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If provider has not been registered, RegHandle == NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterPRIVATE_PWSIMON_DEV_AuthorizationServer
#define EventRegisterPRIVATE_PWSIMON_DEV_AuthorizationServer() McGenEventRegister(&PRIVATE_PWSIMON_DEV_AUTHORIZATIONSERVER, McGenControlCallbackV2, &PRIVATE_PWSIMON_DEV_AUTHORIZATIONSERVER_Context, &PRIVATE_PWSIMON_DEV_AuthorizationServerHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterPRIVATE_PWSIMON_DEV_AuthorizationServer
#define EventUnregisterPRIVATE_PWSIMON_DEV_AuthorizationServer() McGenEventUnregister(&PRIVATE_PWSIMON_DEV_AuthorizationServerHandle) 
#endif

//
// Enablement check macro for COMFinalConstruct
//

#define EventEnabledCOMFinalConstruct() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for COMFinalConstruct
//
#define EventWriteCOMFinalConstruct(HRESULT, Class, Name)\
        EventEnabledCOMFinalConstruct() ?\
        Template_qzz(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &COMFinalConstruct, HRESULT, Class, Name)\
        : ERROR_SUCCESS\

//
// Enablement check macro for COMFinalRelease
//

#define EventEnabledCOMFinalRelease() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for COMFinalRelease
//
#define EventWriteCOMFinalRelease(Class, Name)\
        EventEnabledCOMFinalRelease() ?\
        Template_zz(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &COMFinalRelease, Class, Name)\
        : ERROR_SUCCESS\

//
// Enablement check macro for COMError
//

#define EventEnabledCOMError() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for COMError
//
#define EventWriteCOMError(HRESULT, Class, Method, Desc)\
        EventEnabledCOMError() ?\
        Template_qzzz(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &COMError, HRESULT, Class, Method, Desc)\
        : ERROR_SUCCESS\

//
// Enablement check macro for genericXHR_GET
//

#define EventEnabledgenericXHR_GET() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for genericXHR_GET
//
#define EventWritegenericXHR_GET(Url, Result)\
        EventEnabledgenericXHR_GET() ?\
        Template_zz(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &genericXHR_GET, Url, Result)\
        : ERROR_SUCCESS\

//
// Enablement check macro for genericXHR_POST
//

#define EventEnabledgenericXHR_POST() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for genericXHR_POST
//
#define EventWritegenericXHR_POST(Url, Payload, Result)\
        EventEnabledgenericXHR_POST() ?\
        Template_zzz(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &genericXHR_POST, Url, Payload, Result)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CTokenFile_LockForRenew_DoLock
//

#define EventEnabledCTokenFile_LockForRenew_DoLock() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for CTokenFile_LockForRenew_DoLock
//
#define EventWriteCTokenFile_LockForRenew_DoLock(Url, Payload)\
        EventEnabledCTokenFile_LockForRenew_DoLock() ?\
        Template_zz(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &CTokenFile_LockForRenew_DoLock, Url, Payload)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CTokenFile_LockForRenew_AlreadyLocked
//

#define EventEnabledCTokenFile_LockForRenew_AlreadyLocked() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for CTokenFile_LockForRenew_AlreadyLocked
//
#define EventWriteCTokenFile_LockForRenew_AlreadyLocked(size)\
        EventEnabledCTokenFile_LockForRenew_AlreadyLocked() ?\
        Template_q(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &CTokenFile_LockForRenew_AlreadyLocked, size)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CTokenFile_UnLockFromRenew_Succeeded
//

#define EventEnabledCTokenFile_UnLockFromRenew_Succeeded() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for CTokenFile_UnLockFromRenew_Succeeded
//
#define EventWriteCTokenFile_UnLockFromRenew_Succeeded(Name, size)\
        EventEnabledCTokenFile_UnLockFromRenew_Succeeded() ?\
        Template_zq(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &CTokenFile_UnLockFromRenew_Succeeded, Name, size)\
        : ERROR_SUCCESS\

//
// Enablement check macro for CTokenFile_UnLockFromRenew_Failed
//

#define EventEnabledCTokenFile_UnLockFromRenew_Failed() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for CTokenFile_UnLockFromRenew_Failed
//
#define EventWriteCTokenFile_UnLockFromRenew_Failed(Name, size)\
        EventEnabledCTokenFile_UnLockFromRenew_Failed() ?\
        Template_zq(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &CTokenFile_UnLockFromRenew_Failed, Name, size)\
        : ERROR_SUCCESS\

//
// Enablement check macro for AutomationInstanceTerminatedDirty
//

#define EventEnabledAutomationInstanceTerminatedDirty() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for AutomationInstanceTerminatedDirty
//
#define EventWriteAutomationInstanceTerminatedDirty(HRESULT)\
        EventEnabledAutomationInstanceTerminatedDirty() ?\
        Template_q(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &AutomationInstanceTerminatedDirty, HRESULT)\
        : ERROR_SUCCESS\

//
// Enablement check macro for UIInstanceTerminatedDirty
//

#define EventEnabledUIInstanceTerminatedDirty() ((PRIVATE_PWSIMON_DEV_AuthorizationServerEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for UIInstanceTerminatedDirty
//
#define EventWriteUIInstanceTerminatedDirty(HRESULT)\
        EventEnabledUIInstanceTerminatedDirty() ?\
        Template_q(PRIVATE_PWSIMON_DEV_AuthorizationServerHandle, &UIInstanceTerminatedDirty, HRESULT)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions 
//
//
//Template from manifest : T_HR_CLASS_NAME
//
#ifndef Template_qzz_def
#define Template_qzz_def
ETW_INLINE
ULONG
Template_qzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2
    )
{
#define ARGUMENT_COUNT_qzz 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qzz, EventData);
}
#endif

//
//Template from manifest : T_CLASS_NAME
//
#ifndef Template_zz_def
#define Template_zz_def
ETW_INLINE
ULONG
Template_zz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1
    )
{
#define ARGUMENT_COUNT_zz 2

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zz];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zz, EventData);
}
#endif

//
//Template from manifest : T_HR_CLASS_METHOD_DESC
//
#ifndef Template_qzzz_def
#define Template_qzzz_def
ETW_INLINE
ULONG
Template_qzzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2,
    _In_opt_ PCWSTR  _Arg3
    )
{
#define ARGUMENT_COUNT_qzzz 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qzzz];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], 
                        (_Arg3 != NULL) ? _Arg3 : L"NULL",
                        (_Arg3 != NULL) ? (ULONG)((wcslen(_Arg3) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qzzz, EventData);
}
#endif

//
//Template from manifest : T_XHR_URL_PAYLOAD_RESULT
//
#ifndef Template_zzz_def
#define Template_zzz_def
ETW_INLINE
ULONG
Template_zzz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_opt_ PCWSTR  _Arg1,
    _In_opt_ PCWSTR  _Arg2
    )
{
#define ARGUMENT_COUNT_zzz 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzz];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (_Arg1 != NULL) ? _Arg1 : L"NULL",
                        (_Arg1 != NULL) ? (ULONG)((wcslen(_Arg1) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (_Arg2 != NULL) ? _Arg2 : L"NULL",
                        (_Arg2 != NULL) ? (ULONG)((wcslen(_Arg2) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzz, EventData);
}
#endif

//
//Template from manifest : T_SIZE
//
#ifndef Template_q_def
#define Template_q_def
ETW_INLINE
ULONG
Template_q(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  _Arg0
    )
{
#define ARGUMENT_COUNT_q 1

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_q];

    EventDataDescCreate(&EventData[0], &_Arg0, sizeof(const unsigned int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_q, EventData);
}
#endif

//
//Template from manifest : T_NAME_SIZE
//
#ifndef Template_zq_def
#define Template_zq_def
ETW_INLINE
ULONG
Template_zq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const unsigned int  _Arg1
    )
{
#define ARGUMENT_COUNT_zq 2

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zq];

    EventDataDescCreate(&EventData[0], 
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &_Arg1, sizeof(const unsigned int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zq, EventData);
}
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

#define MSG_providermessage                  0x90000001L
#define MSG_event_101                        0xB0000065L
#define MSG_event_102                        0xB0000066L
#define MSG_event_103                        0xB0000067L
#define MSG_event_104                        0xB0000068L
#define MSG_event_105                        0xB0000069L
#define MSG_event_120                        0xB0000078L
#define MSG_event_121                        0xB0000079L
#define MSG_event_130                        0xB0000082L
#define MSG_event_131                        0xB0000083L
#define MSG_event_900                        0xB0000384L
#define MSG_event_901                        0xB0000385L
